#!/bin/sh
# Simple wrapper to provide downstream images with the ability to add services

if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] ; then
	echo "Usage: $0 service_name service_user service_exec"
	exit 1
fi

SERVICE_NAME=$1
SERVICE_USER=$2
SERVICE_EXEC=$3

# Ensure service directory doesn't exist
if [ -x "/etc/services.d/$SERVICE_NAME" ] ; then
	echo "Service $SERVICE_NAME already exits, aborting."
	exit 1
fi

# Ensure a valid user was specified
if [ "$SERVICE_USER" != "www" ] && [ "$SERVICE_USER" != "root" ] ; then
	echo "Service may run as user www or root - $SERVICE_USER is not supported, aborting."
	exit 1
fi

# Create a service directory with an apropriate 'run' file
mkdir -p "/etc/services.d/$SERVICE_NAME"
printf "#!/bin/sh\necho \"init[services]: Starting '%s' as user '%s'\"\ncd /app\ns6-setuidgid %s %s" "$SERVICE_EXEC" "$SERVICE_USER" "$SERVICE_USER" "$SERVICE_EXEC" >"/etc/services.d/$SERVICE_NAME/run"
chmod +x "/etc/services.d/$SERVICE_NAME/run"

# Notify s6-svscan to check /etc/services.d again if it's running
if [ -p /etc/services.d/.s6-svscan/control ] ; then
	s6-svscanctl -an /etc/services.d
fi
